{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated) {\n      // Verificar roles si están especificados en la ruta\n      const roles = route.data['roles'];\n      if (roles && roles.length > 0) {\n        const userRole = this.authService.currentUserValue?.rol;\n        if (userRole && roles.includes(userRole)) {\n          return true;\n        } else {\n          // No tiene el rol necesario\n          this.router.navigate(['/unauthorized']);\n          return false;\n        }\n      }\n      return true;\n    }\n    // No está autenticado\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","roles","data","length","userRole","currentUserValue","rol","includes","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/app/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { \r\n  ActivatedRouteSnapshot, \r\n  CanActivate, \r\n  Router, \r\n  RouterStateSnapshot, \r\n  UrlTree \r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    \r\n    if (this.authService.isAuthenticated) {\r\n      // Verificar roles si están especificados en la ruta\r\n      const roles = route.data['roles'] as string[];\r\n      \r\n      if (roles && roles.length > 0) {\r\n        const userRole = this.authService.currentUserValue?.rol;\r\n        \r\n        if (userRole && roles.includes(userRole)) {\r\n          return true;\r\n        } else {\r\n          // No tiene el rol necesario\r\n          this.router.navigate(['/unauthorized']);\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      return true;\r\n    }\r\n\r\n    // No está autenticado\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n    return false;\r\n  }\r\n}"],"mappings":";;;AAcA,OAAM,MAAOA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAG1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;MACpC;MACA,MAAMC,KAAK,GAAGH,KAAK,CAACI,IAAI,CAAC,OAAO,CAAa;MAE7C,IAAID,KAAK,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QAC7B,MAAMC,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,gBAAgB,EAAEC,GAAG;QAEvD,IAAIF,QAAQ,IAAIH,KAAK,CAACM,QAAQ,CAACH,QAAQ,CAAC,EAAE;UACxC,OAAO,IAAI;SACZ,MAAM;UACL;UACA,IAAI,CAACR,MAAM,CAACY,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;UACvC,OAAO,KAAK;;;MAIhB,OAAO,IAAI;;IAGb;IACA,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEX,KAAK,CAACY;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EACd;;;uBAlCWlB,SAAS,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATxB,SAAS;MAAAyB,OAAA,EAATzB,SAAS,CAAA0B,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}