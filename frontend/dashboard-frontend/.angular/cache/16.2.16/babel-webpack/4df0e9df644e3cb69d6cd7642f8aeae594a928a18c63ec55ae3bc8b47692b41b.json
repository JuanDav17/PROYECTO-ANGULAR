{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000/usuarios';\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  get isAuthenticated() {\n    return !!this.token;\n  }\n  get isAdmin() {\n    return this.currentUserValue?.rol === 'admin';\n  }\n  get isVendedor() {\n    return this.currentUserValue?.rol === 'vendedor';\n  }\n  get isUsuario() {\n    return this.currentUserValue?.rol === 'usuario';\n  }\n  registro(usuario) {\n    return this.http.post(`${this.apiUrl}/registro`, usuario);\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      // Guardar token y usuario\n      localStorage.setItem('token', response.token);\n      localStorage.setItem('currentUser', JSON.stringify(response.usuario));\n      this.currentUserSubject.next(response.usuario);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  getMiPerfil() {\n    return this.http.get(`${this.apiUrl}/me`);\n  }\n  // Métodos para admin\n  listarUsuarios() {\n    return this.http.get(this.apiUrl);\n  }\n  cambiarRol(usuarioId, nuevoRol) {\n    return this.http.put(`${this.apiUrl}/${usuarioId}/rol`, null, {\n      params: {\n        nuevo_rol: nuevoRol\n      }\n    });\n  }\n  cambiarEstado(usuarioId, activo) {\n    return this.http.put(`${this.apiUrl}/${usuarioId}/estado`, null, {\n      params: {\n        activo: activo.toString()\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","router","apiUrl","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","token","isAuthenticated","isAdmin","rol","isVendedor","isUsuario","registro","usuario","post","login","credentials","pipe","response","setItem","stringify","next","logout","removeItem","navigate","getMiPerfil","get","listarUsuarios","cambiarRol","usuarioId","nuevoRol","put","params","nuevo_rol","cambiarEstado","activo","toString","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Usuario, LoginResponse, LoginRequest } from '../models/usuario.model';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/usuarios';\r\n  private currentUserSubject: BehaviorSubject<Usuario | null>;\r\n  public currentUser: Observable<Usuario | null>;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {\r\n    const storedUser = localStorage.getItem('currentUser');\r\n    this.currentUserSubject = new BehaviorSubject<Usuario | null>(\r\n      storedUser ? JSON.parse(storedUser) : null\r\n    );\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): Usuario | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  public get token(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  public get isAuthenticated(): boolean {\r\n    return !!this.token;\r\n  }\r\n\r\n  public get isAdmin(): boolean {\r\n    return this.currentUserValue?.rol === 'admin';\r\n  }\r\n\r\n  public get isVendedor(): boolean {\r\n    return this.currentUserValue?.rol === 'vendedor';\r\n  }\r\n\r\n  public get isUsuario(): boolean {\r\n    return this.currentUserValue?.rol === 'usuario';\r\n  }\r\n\r\n  registro(usuario: Usuario): Observable<Usuario> {\r\n    return this.http.post<Usuario>(`${this.apiUrl}/registro`, usuario);\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          // Guardar token y usuario\r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('currentUser', JSON.stringify(response.usuario));\r\n          this.currentUserSubject.next(response.usuario);\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  getMiPerfil(): Observable<Usuario> {\r\n    return this.http.get<Usuario>(`${this.apiUrl}/me`);\r\n  }\r\n\r\n  // Métodos para admin\r\n  listarUsuarios(): Observable<Usuario[]> {\r\n    return this.http.get<Usuario[]>(this.apiUrl);\r\n  }\r\n\r\n  cambiarRol(usuarioId: number, nuevoRol: string): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/${usuarioId}/rol`, null, {\r\n      params: { nuevo_rol: nuevoRol }\r\n    });\r\n  }\r\n\r\n  cambiarEstado(usuarioId: number, activo: boolean): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}/${usuarioId}/estado`, null, {\r\n      params: { activo: activo.toString() }\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}